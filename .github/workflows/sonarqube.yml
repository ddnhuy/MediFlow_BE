name: SonarQube

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, test and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore NuGet packages
        shell: bash
        run: dotnet restore MediFlow.sln

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"ddnhuy_MediFlow_BE" \
            /o:"ddnhuy" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.exclusions="**/appsettings*.json,**/SeedData.cs,**/helm/**,**/Migrations/**" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/coverage/*.cobertura.xml"

      - name: Build the project
        shell: bash
        run: dotnet build MediFlow.sln --no-restore --configuration Release

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Pull PostgreSQL image
        run: docker pull postgres:14

      - name: Build and start Docker Compose
        run: docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml up -d

# ... các bước trước giữ nguyên

      - name: Run tests and generate coverage report
        shell: bash
        run: |
            set -e
            echo "=== 🧪 Bắt đầu chạy test và sinh báo cáo coverage ==="
            mkdir -p TestResults/coverage

            for proj in $(find . -type f -name "*.csproj" | grep -i "test"); do
              echo "➡️  Running tests for $proj"
              name=$(basename "$proj" .csproj)
              output="TestResults/coverage/${name}.cobertura.xml"
              output_dir="TestResults/coverage/${name}"

              mkdir -p "$output_dir"

              dotnet test "$proj" \
                --no-restore --configuration Release \
                /p:CollectCoverage=true \
                /p:CoverletOutput="${output_dir}/" \
                /p:CoverletOutputFormat="json;cobertura" \
                /p:Include="[MediFlow.*]*" \
                /p:Exclude="[*.Tests]*" \
                /p:IncludeTestAssembly=false \
                --logger "console;verbosity=detailed"

              echo "🔎 Kiểm tra tồn tại của file coverage.json:"
              if [[ -f "${output_dir}/coverage.json" ]]; then
                echo "✅ Đã sinh ra file coverage.json"
                cat "${output_dir}/coverage.json" | head -n 100
              else
                echo "❌ Không có file coverage.json nào được sinh!"
              fi

              echo "🔍 Kiểm tra file cobertura:"
              if [[ -f "${output_dir}/coverage.cobertura.xml" ]]; then
                mv "${output_dir}/coverage.cobertura.xml" "$output"
                echo "✅ Đã tạo file coverage: $output"
              else
                echo "❌ Không tạo được file cobertura cho $proj – có thể test không gọi code thực tế, hoặc cấu hình sai."
                echo "📁 Nội dung thư mục ${output_dir}:"
                ls -lah "$output_dir"
              fi
            done

            echo "📂 Danh sách file coverage được tạo:"
            find TestResults/coverage -name "*.cobertura.xml" || echo "⚠️ Không có file coverage nào!"


      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${SONAR_TOKEN}"

      - name: Clean up Docker containers
        run: docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml down
