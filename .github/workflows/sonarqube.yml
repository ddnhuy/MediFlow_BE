name: SonarQube

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, test and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarQube to get all history

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore NuGet packages
        shell: bash
        run: dotnet restore MediFlow.sln

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Pull PostgreSQL image
        shell: bash
        run: docker pull postgres:14

      - name: Build and start Docker Compose
        run: docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml up -d

      # Add a delay to ensure services are fully started
      - name: Wait for services to be ready
        run: sleep 20

      # Begin SonarQube analysis after Docker is ready but before tests
      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"ddnhuy_MediFlow_BE" \
            /o:"ddnhuy" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
            /d:sonar.exclusions="**/appsettings*.json,**/SeedData.cs,**/helm/**/*,**/Migrations/**/*,**/obj/**/*,**/bin/**/*" \
            /d:sonar.coverage.exclusions="**/*Tests.cs,**/*Tests/*.cs,**/Tests/**/*.cs,**/Migrations/**/*"

      - name: Build the project
        shell: bash
        run: dotnet build MediFlow.sln --no-restore --configuration Release

      # Run tests with consistent coverage format
      - name: Run tests with coverage
        shell: bash
        run: |
          mkdir -p TestResults
          echo "Running tests with coverage reports..."
          dotnet test MediFlow.sln \
            --configuration Release \
            --no-build \
            --no-restore \
            --logger "trx;LogFileName=test-results.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput="./TestResults/coverage.opencover.xml" \
            /p:MergeWith="./TestResults/coverage.json" \
            /p:Exclude="[*]*.Migrations.*,[*]*.SeedData" \
            || echo "Some tests may have failed but continuing with SonarQube analysis"
          
          # List generated coverage files
          echo "Coverage files generated:"
          find TestResults -type f -name "*.xml" || echo "No coverage files found"

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${SONAR_TOKEN}" || echo "SonarQube analysis may have issues but workflow continues"

      - name: Clean up Docker containers
        if: always()  # Ensure cleanup happens even if previous steps fail
        run: docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml down