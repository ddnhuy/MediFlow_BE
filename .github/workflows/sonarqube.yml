name: SonarQube

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, test and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore NuGet packages
        shell: bash
        run: |
          dotnet restore MediFlow.sln

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"ddnhuy_MediFlow_BE" \
            /o:"ddnhuy" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.exclusions="**/appsettings*.json, **/SeedData.cs, **/helm/**, **/Migrations/**" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/coverage/coverage.cobertura.xml" \
            /d:sonar.secret.exclusions="**/appsettings*.json, **/SeedData.cs, **/helm/**, **/Migrations/**"

      - name: Build the project
        shell: bash
        run: |
          dotnet build MediFlow.sln --no-restore --configuration Release || echo "Build failed, continuing with SonarQube analysis."

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Pull PostgreSQL image
        shell: bash
        run: |
          docker pull postgres:14

      - name: Build and start Docker Compose
        run: |
          docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml up -d

      - name: Run tests and generate coverage report
        shell: bash
        run: |
          dotnet test MediFlow.sln \
            --no-restore --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=TestResults/coverage/coverage.cobertura.xml

      - name: Debug - List coverage files
        run: ls -R TestResults/coverage

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${SONAR_TOKEN}"

      - name: Clean up Docker containers
        run: |
          docker compose -f ./docker-compose.yml -f ./docker-compose.override.yml down
